----------------- Laravel Courses -----------
#C-08

1. DB design scheme for planning table, model controller
https://app.dbdesigner.net/designer/schema/new

2. Install laravel, .env config, create database,  breeze

3. Create Model, migration, controller

php artisan make:model Course -mc
php artisan make:model Platform -mc
php artisan make:model Series -mc
php artisan make:model Topic -mc
php artisan make:model Author -mc

4. go to  Every migration table created folder and for create field
and run
    php artisan migrate

                    5. seeding data run function

use App\Models\Series;
 $series = ['PHP', 'JavaScript', 'WordPress', 'Laravel'];

        foreach ($series as $item){
            Series::create([
                'name'=>$item
            ]);
        }


    then cli:
     php artisan migrate:fresh --seed


                    6. Create factory

    php artisan make:factory CourseFactory

   go to  database\factories\CourseFactory.php

use App\Models\Platform;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

  public function definition()
    {
        return [
            'name'=>fake()->sentence(),
            'book' =>rand(0,1),
            'price'   => rand(0,1) ? rand(1,100) :0.00,
            'year'  => rand(2010,2021),
            'image' => fake()->imageUrl(),
            'description' => fake()->paragraphs(3,true),
            'link' => fake()->url(),
            'submitted_by' => User::all()->random()->id,
            'duration'=> rand(0,2),
            'platform_id' => Platform::all()->random()->id,

            // 'resources'=> rand(0,10),
            // 'level_id'    => Level::all()->random()->id,
        ];
    }
}

then cli:
     php artisan migrate:fresh --seed


** seeding fake data: sedding file

User::factory(50)->create();

Course::factory(100)->create();;

// Topic table

        $topics = ['Eloquent','Validation','Refactoring','Testing','Authentication'];
        foreach ($topics as $topic){
            Topic::create([
                'name'=>$topic
            ]);
        }


then cli:
     php artisan migrate:fresh --seed


8. relation foreign key data multiple relation data show

go to app/Models/Course.php


 function platform(){
        return $this->belongsTo(platform::class);
    }

go to app\Http\Controllers\CourseController.php

$course = Course::with('platform')->findOrFail($id);
        return $course;


show result: http://localhost:8000/courses/3


-------------------- C-8(bonous-01) -----------------------

1.  foreign key data multiple relation data show

*go to app/Models/Course.php

        ### fo rmultiple relation data: topics table  ###

public function topics(){
        return $this->belongsToMany(Topic::class, 'course-topic', 'course_id', 'topic_id');
    }

*go to database\seeders\DatabaseSeeder.php

//Relation multiple data
            $courses = Course::all();

            foreach ($courses as $course) {
                $topic_id_array = Topic::all()->random(rand(1, 5))->pluck('id')->toArray();
                $course->topics()->attach($topic_id_array);


            }

then cli:
     php artisan migrate:fresh --seed


            //Author seed

            $authors = ['Sajedul', 'Author Name', 'Laraveljobs'];
            foreach ($authors as $item) {
                Author::create([
                    'name' => $item,
                ]);
            }





** go to app\Http\Controllers\CourseController.php

public function show($id){
        $course = Course::with('platform', 'topics')->findOrFail($id);
        return $course;
    }


show result: http://localhost:8000/courses/3



                     ### for multiple relation data: Author table  ###

1. *go to app/Models/Course.php

public function authors(){
        return $this->belongsToMany(Author::class, 'course-author', 'course_id', 'author_id');
    }

2. go to Seeders

 $courses = Course::all();

            foreach ($courses as $course) {

                // topic
                $topics = Topic::all()->random(rand(1, 5))->pluck('id')->toArray();
                $course->topics()->attach($topics);

                // author

                $authors = Author::all()->random(rand(1, 3))->pluck('id')->toArray();
                $course->authors()->attach($authors);


            }


then cli:
     php artisan migrate:fresh --seed



                ### for multiple relation data:  course-series table  ###

1. *go to app/Models/Course.php

public function series(){
        return $this->belongsToMany(Series::class, 'course-series', 'course_id', 'series_id');
    }

2. go to Seeders

            $series = Series::all()->random(rand(1, 4))->pluck('id')->toArray();
            $course->series()->attach($series);


3.  go to app\Http\Controllers\CourseController.php

public function show($id){
        $course = Course::with('platform', 'topics', 'series')->findOrFail($id);
        return $course;
    }



then cli:
     php artisan migrate:fresh --seed

show result: http://localhost:8000/courses/3








                -------------------- C-8(bonous-02) -----------------------



Template Design -
clone the project:  https://laravel-courses.com/

Html, Talwindcss  : https://github.com/crazzyboy420/laravel-course.git

1. welcome.blade.php

    <x-guest-layout>

    </x-guest-layout>

2. guest.blade.php

    <body>
        {{ $slot }}
    </body>

3. Html template er custom css copy TO resources\css\app.css  (paste)

4. Html template header part  copy TO guest.blade.php (header, footer part  paste)

header

footer

set up in guest.blade.php field

5. welcome.blade.php

<x-guest-layout>

    Here .. set up body content like hero banner, section, email subscription etc.

</x-guest-layout>

6. if need any field add to table like "series table "

** go to: database\migrations\2022_12_22_185640_create_series_table.php
    $table->string('image'); // add field

**  go to seeder for faker data

    // Series Table

            $series = [
                [
                    'name' => 'PHP',
                    'image' => 'https://cdn.cdnlogo.com/logos/p/79/php.svg',
                ],
                [
                    'name' => 'JavaScript',
                    'image' => 'https://cdn.cdnlogo.com/logos/j/69/javascript.svg',
                ],
                [
                    'name' => 'WordPress',
                    'image' => 'https://cdn.cdnlogo.com/logos/w/65/wordpress.svg',
                ],
                [
                    'name' => 'Laravel',
                    'image' => 'https://cdn.cdnlogo.com/logos/l/56/laravel-wordmark.svg',
                ]
            ];

           foreach ($series as $item) {
                Series::create([
                    'name' => $item['name'],
                    'image' => $item['image']
                ]);
            }

then cli:
     php artisan migrate:fresh --seed

7. create home controller
    php artisan make:controller HomeController

    // go to home controller

    public function home(){
        return view('welcome');
    }

// web.php
    Route::get('/', [HomeController::class, 'home'])->name('home');



------------- static to dynamic -------------

                ### 8. for "series" static to dynamic in welcome page ###

**go to home controller

public function home(){

        // series

        $series = Series::take(4)->get();
        // dd($series);
        return view('welcome',[
            'series'=> $series
        ]);
    }

** welcome page 'series' available as array variable

@foreach($series as $item )
                <li class="w-full lg:max-w-[165px]">
                    <a href="#" class="bg-white border mx-auto border-orange box-shadow w-full rounded-lg flex items-center justify-center">
                        <img src="{{$item->image}}" alt="{{$item->name}}" class="w-20 md:w-auto h-auto object-contain">
                    </a>
                </li>
@endforeach



                     ###  for "features"/"courses"  html section/welcome page ###

a. HomeController

// feature courses
        $featureCourses = Course::take(4)->get();

        return view('welcome',[
            'series'=> $series,
            'courses'=> $featureCourses,
        ]);

b. ** welcome page 'courses' available as array variable

   @foreach($courses as $course )

        {{$course->name}}

    @endforeach

                ### c. create author user "submitted_by" foreign key field setup ###

** go to  model folder Course.php

    public function submittedBy(){
        return $this->belongsTo(User::class, 'submitted_by');
    }

** welcome page 'submittedBy' available as function
    {{$course->submittedBy->name}}


              ###  d. for "duration" foreign key field setup ###

**go to   database\migrations\2022_12_23_185205_create_courses_table.php

    $table->unsignedBigInteger('duration')->default(0)->comment('0=1-5 hours, 1=5-10 hours, 2=10+ hours');

**  go to  model folder Course.php

    public function duration($value){

        if($value == 1){
            return "5-10 hours";
        }elseif($value == 1){
            return "10+ hours";
        }else{
            return "1-5 hours";
        }
    }

** welcome page 'duration' available as function

      {{$course->duration($course->duration)}}



              ###  e. for  Difficulty "Level" foreign key field setup ###


1. go to database\migrations\2022_12_23_185205_create_courses_table.php  add new field

    public function up(){
        Schema::create('courses', function (Blueprint $table) {

            ///...
            $table->unsignedBigInteger('difficulty_level')->default(0)->comment('0=Beginner, 1=Intermediate, 2=Advanced');

        })
    }

2. go to database\factories\CourseFactory.php

    public function definition(){

        return [

            // ....
            'difficulty_level'=> rand(0,2),
        ]
    }

3. go to model Course.php

     // difficultyLevel

    public function difficultyLevel($value){

        if($value == 1){
            return "Intermediate";
        }elseif($value == 2){
            return "Advanced";
        }else{
            return "Beginner";
        }
    }

4. ** welcome page 'difficultyLevel' available as function

      {{$course->difficultyLevel($course->difficulty_level)}}


                --------------------   Class - 10 -----------------------
------------------------------------------------------------------------------------------------------
                ### Change Vite To Laravel Mix ###

1.vite.config.js Rename to webpack.mix.js

2. paste the code webpack.mix.js

    const mix = require('laravel-mix');

    mix.js('resources/js/app.js', 'public/js').postCss('resources/css/app.css', 'public/css', [
        require('postcss-import'),
        require('tailwindcss'),
        require('autoprefixer'),
    ]);

3. package.json  remove vite

{
    "private": true,
    "scripts": {
        "dev": "npm run development",
        "development": "mix",
        "watch": "mix watch",
        "watch-poll": "mix watch -- --watch-options-poll=1000",
        "hot": "mix watch --hot",
        "production": "mix --production",
        "prod": "npm run production"

    },
    "devDependencies": {
        "@tailwindcss/forms": "^0.5.2",
        "alpinejs": "^3.4.2",
        "autoprefixer": "^10.4.2",
        "axios": "^1.1.2",
        "laravel-mix": "^6.0.6",
        "lodash": "^4.17.19",
        "postcss": "^8.4.6",
        "tailwindcss": "^3.1.0"
    }
}

4. delete node_modules

 cli:
    npm install
    npm run dev

5. change @vite(['resources/css/app.css', 'resources/js/app.js'])  in 2 below file

    resources\views\layouts\guest.blade.php
    resources\views\layouts\app.blade.php

    {{-- css --}}
    <link rel="stylesheet" href="{{ asset('css/app.css') }}">

    <!-- Scripts -->
    <script src="{{ asset('js/app.js') }}" ></script>

6. npm run watch  // any change automatically compile and run


        -------------- Single course page design --------------------

1. see web.php
   // course single page
Route::get('/courses/{slug}', [CourseController::class, 'show' ])->name('course');

2. use course slug, go to 2022_12_23_185205_create_courses_table

add the field
    $table->string('slug', 255);

and go to CourseFactory  and add
    'slug' =>fake()->slug(),


    then cli:
     php artisan migrate:fresh --seed


3.go to CourseController.php show method   and set view ;

     public function show($slug){
        $course = Course::where('slug', $slug)->with('platform', 'topics', 'series')->first();

        return view('course.single',[
            'course'=> $course,
        ]);
    }


5.link from welcome.blade.php

    *before create course-box.blade.php  under resources > views> components folder
    *cut from welcome.blade.php page course elements
    *paste  course-box.blade.php

    <div class="bg-white rounded grap-10 overflow-hidden shadow-card">
        //....
    </div>

and welcome page

     @foreach($courses as $course )
                @include('components.course-box', ['course'=>$course])
    @endforeach

and course-box.blade.php
    *link to page go single.blade.php
         <a href="{{ route('course', $course->slug) }}">  </a>

** validate slug:  app\Http\Controllers\CourseController.php

    // test view
        return response()->json($course);

    // wrong page
        if(empty($course)){
            return abort(404);
        }




6.For view create course folder and single.blade.php
    single.html from specific code copy To single.blade.php

    <x-guest-layout>

        // code..

    </x-guest-layout>


customize ingle.blade.php where needed like course price
    {{$course->price ? '$'. number_format( $course->price, 2 ) : 'Free'}}


                 ### for topic table add field "slug" ###
    --------------------------------------------------------------

** database\migrations\2022_12_22_185723_create_topics_table.php
         $table->string('slug');

** database\seeders\DatabaseSeeder.php
$topics = ['Eloquent', 'Validation', 'Refactoring', 'Testing', 'Authentication'];
            foreach ($topics as $topic) {
                $slug = strtolower(str_replace(' ', '-', $topic));
                Topic::create([
                    'name' => $topic,
                    'slug'=>$slug
                ]);
            }

 then cli:
     php artisan migrate:fresh --seed

** web.php

    use App\Http\Controllers\TopicController;
    Route::get('/topics/{slug}', [TopicController::class, 'index' ])->name('topics');


** single.blade.php
     href="{{ route('topics', $topic->slug) }}"

** create function

     public function index($slug){

        $topic = Topic::where('slug', $slug)->with('courses')->first();

        //return $topic;

        return view('topic.single', [
            'topic' => $topic
        ]);
    }


** topic model

   public function courses() {
        return $this->belongsToMany(Course::class, 'course-topic', 'topic_id', 'course_id');
    }



** create folder topic under index.blade.php

    <x-guest-layout>
        <div class="bg-gray mt-1 py-6">
            <div class="container">
                <h2 class="text-center font-bold text-2xl mb-6">{{$topic->name}}</h2>

                <div class="max-w-7xl w-full inline-flex single-feature gap-10 flex-wrap mx-auto">
                    @foreach($topic->courses as $course)
                        @include('components.course-box', ['course' => $course])
                    @endforeach
                </div>
            </div>
        </div>
    </x-guest-layout>




   --------------  course page design --------------------

1. web.php
    Route::get('/courses', [CourseController::class, 'index' ])->name('courses');


2. user name set by seeder
    User::create([
            'name' => 'Sajedul Islam',
            'email' => 'sajedul@gmail.com',
            'password' =>  bcrypt('sajedul@gmail.com'),
        ]);


--------------------------------------------------------------------------------------------------


--------------------  Class - 11 Single page design: reviews, Author, pagination -------------


 "Author" table modification :

1. migrations\2022_12_22_185810_create_authors_table.php

 public function up()
    {
        Schema::create('authors', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('image');
            $table->string('twitter_url')->nullable();
            $table->string('github_url')->nullable();
            $table->string('website_url')->nullable();
            $table->text('description')->nullable();
            $table->timestamps();
        });
    }

2. create factory
    php artisan make:factory AuthorFactory
database\factories\AuthorFactory.php

    public function definition(){
        return [
            'name'=> $this->faker->name(),
            'image'=> $this->faker->imageUrl(300,300),
            'twitter_url'=> $this->faker->url(),
            'github_url'=> $this->faker->url(),
            'website_url'=> $this->faker->url(),
            'description'=> $this->faker->paragraph(),
        ];
    }



3. database\seeders\DatabaseSeeder.php

    //Author seed
            Author::factory(10)->create();

 then cli:
     php artisan migrate:fresh --seed

4. go to app\Http\Controllers\CourseController.php

    public function show($slug){
        $course = Course::where('slug', $slug)->with('platform', 'topics', 'series', 'authors')->first();
        .....

    }

5. go to    app\Models\Course.php for belongsToMany relation with "courses" table with "authors" with "users" table


    public function authors(){
            return $this->belongsToMany(Author::class, 'course-author', 'course_id', 'author_id');
    }

6. single page

         @foreach ( $course->authors as $author)

            {{$author->name}}

            //...

        @endforeach


## Create "Review" model, migratrion, controller, factory  ##

                                    "Review" table:


1. php artisan make:model Review -mc

2. migrations\2022_12_25_191103_create_reviews_table.php    scheme design

     public function up(){
        Schema::create('reviews', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('review_by');
            $table->text('comment');
            $table->unsignedBigInteger('star')->default(5);
            $table->unsignedBigInteger('course_id');
            $table->timestamps();

            $table->foreign('review_by')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('course_id')->references('id')->on('courses')->onDelete('cascade');


        });
    }

3. create factory
    php artisan make:factory ReviewFactory


    ** go file

    use App\Models\User;
    use App\Models\Course;

    public function definition(){
        return [
            'review_by'=> User::all()->random()->id,
            'comment'=> $this->faker->paragraph(),
            'star'=> $this->faker->numberBetween(1,5),
            'star'=> $this->faker->numberBetween(1,5),
            'course_id'=> Course::all()->random()->id

        ];
    }


4.  database\seeders\DatabaseSeeder.php

        // review table
            Review::factory(100)->create();


         then cli:
     php artisan migrate:fresh --seed




5. go to app\Http\Controllers\CourseController.php

  public function show($slug){

        $course = Course::where('slug', $slug)->with('platform', 'topics', 'series', 'authors', 'reviews')->first();

        // test view
        // return response()->json($course);

        // wrong page
        if(empty($course)){
            return abort(404);
        }

        return view('course.single',[
            'course'=> $course,
        ]);

    }

5. go to    app\Models\Course.php  for "hasMany" relation with "courses" table with "reviews" with "users" table

    public function reviews(){
        return $this->hasMany(Review::class);
    }

6. another review show by user and comment :  for user Relation

    go to app\Models\Review.php

    public function user(){
        return $this->belongsTo(User::class,'review_by');
    }


7. go to resources\views\course\single.blade.php

        {{count($course->reviews)}} Review{{count($course->reviews)>1 ? 's' : ''}}


        <h2 class="mt-4 pt-4 text-lg font-bold text-gray-900">Reviews</h2>

          @if (count($course->reviews)> 0 )
                        @foreach ($course->reviews as $review )
                            <div class="mb-6 bg-white p-4">
                                <div class="mb-2">{{$review->comment}}</div>
                                <h4>> Review By: {{$review->user->name}} </h4>

                            </div>
                        @endforeach
                    @else
                        <p class="mt-2 bg-white rounded-sm shadow p-6">No review yet.</p>
                    @endif




--------------------  Class-11 User Login, Register ---------------------------------

        ## User ##
1. scheme user table modify
database\migrations\2014_10_12_000000_create_users_table.php

        //....
            $table->unsignedBigInteger('type')->default(0)->comment('0=User, 1=Admin');
        //....

2. database\seeders\DatabaseSeeder.php

    //create admin user
        User::create([
            'name' => 'Admin',
            'email' => 'sajedul@gmail.com',
            'password' =>  bcrypt('sajedul@gmail.com'),
            'type' =>  1,
        ]);


then cli:
     php artisan migrate:fresh --seed



3. resources\views\auth\login.blade.php
    <div class="w-96 mx-auto py-12">

        //..code

    </div>

4.resources\views\layouts\guest.blade.php

    @if(Auth::check())
        <span>Welcome: {{Auth::user()->name}} </span>

                @if(Auth::user()->type === 1)
                    <a href="{{route('dashboard')}}" class="ml-8 inline-flex items-center justify-center rounded border border-transparent bg-black px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-500">Dashboard</a>
                @else
                    <a href="" class="ml-8 inline-flex items-center justify-center rounded border border-transparent bg-black px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-500">Submit a course</a>
                @endif

            <form class="ml-4" method="POST" action="{{ route('logout') }}"> @csrf
                <button class="text-red-600" type="submit">Logout</button>
            </form>
        @else
        <a href="{{route('login')}}" class="text-sm font-medium text-gray-500 hover:text-gray-900">
        Sign in</a>
        <a href="{{route('register')}}" class="ml-8 inline-flex items-center justify-center rounded border border-transparent bg-black px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-500">Sign up</a>
    @endif


5. web.php

    Route::middleware('auth')->group(function () {

        //...
        Route::get('/dashboard', [HomeController::class, 'dashboard'])->name('dashboard');

    }


6. HomeController

    use Illuminate\Support\Facades\Auth;

    public function dashboard() {
        if(Auth::user()->type === 1) {
            return view('dashboard');
        } else {
            return redirect()->route('home');
        }
    }




--------------------  Class-11 Pagination ---------------------------------

1.app\Http\Controllers\TopicController.php

        public function index($slug){

        $topic = Topic::where('slug', $slug)->first();
        $courses = $topic->courses()->paginate(12); //paginate

        //return $topic;

        return view('topic.single', [
            'topic' => $topic,
            'courses' => $courses
        ]);
    }

2. resources\views\topic\single.blade.php

         @foreach($courses as $course)
                    @include('components.course-box', ['course' => $course])
                @endforeach
            </div>

            {{ $courses->links() }}

